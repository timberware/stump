// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
)

const deleteFollowsByUserId = `-- name: DeleteFollowsByUserId :exec
DELETE FROM follows WHERE user_id = (?)
`

func (q *Queries) DeleteFollowsByUserId(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteFollowsByUserId, userID)
	return err
}

const deleteUserByUserId = `-- name: DeleteUserByUserId :exec
DELETE FROM user WHERE user_id = (?)
`

func (q *Queries) DeleteUserByUserId(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByUserId, userID)
	return err
}

const getFollowers = `-- name: GetFollowers :many
SELECT username FROM follows WHERE user_id = ?
`

func (q *Queries) GetFollowers(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFollowers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var username string
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT refresh_token FROM user WHERE user_id = ?
`

func (q *Queries) GetRefreshToken(ctx context.Context, userID string) (string, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, userID)
	var refresh_token string
	err := row.Scan(&refresh_token)
	return refresh_token, err
}

const getTwitchToken = `-- name: GetTwitchToken :one
SELECT twitch_token FROM user WHERE user_id = ?
`

func (q *Queries) GetTwitchToken(ctx context.Context, userID string) (string, error) {
	row := q.db.QueryRowContext(ctx, getTwitchToken, userID)
	var twitch_token string
	err := row.Scan(&twitch_token)
	return twitch_token, err
}

const getUserID = `-- name: GetUserID :one
SELECT user_id FROM user WHERE user_id = ?
`

func (q *Queries) GetUserID(ctx context.Context, userID string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserID, userID)
	var user_id string
	err := row.Scan(&user_id)
	return user_id, err
}

const getUsername = `-- name: GetUsername :one
SELECT username FROM user WHERE user_id = ?
`

func (q *Queries) GetUsername(ctx context.Context, userID string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUsername, userID)
	var username string
	err := row.Scan(&username)
	return username, err
}

const insertRefreshToken = `-- name: InsertRefreshToken :exec
INSERT INTO user (refresh_token) VALUES (?)
`

func (q *Queries) InsertRefreshToken(ctx context.Context, refreshToken string) error {
	_, err := q.db.ExecContext(ctx, insertRefreshToken, refreshToken)
	return err
}

const insertTwitchToken = `-- name: InsertTwitchToken :exec
INSERT INTO user (twitch_token) VALUES (?)
`

func (q *Queries) InsertTwitchToken(ctx context.Context, twitchToken string) error {
	_, err := q.db.ExecContext(ctx, insertTwitchToken, twitchToken)
	return err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO user (user_id, username, twitch_token) VALUES (?, ?, ?)
`

type InsertUserParams struct {
	UserID      string
	Username    string
	TwitchToken string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser, arg.UserID, arg.Username, arg.TwitchToken)
	return err
}

const insertUserId = `-- name: InsertUserId :exec
INSERT INTO user (user_id) VALUES (?)
`

func (q *Queries) InsertUserId(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, insertUserId, userID)
	return err
}

const insertUsername = `-- name: InsertUsername :exec
INSERT INTO user (username) VALUES (?)
`

func (q *Queries) InsertUsername(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, insertUsername, username)
	return err
}

const updateUserRefreshToken = `-- name: UpdateUserRefreshToken :exec
UPDATE user SET refresh_token = (?) WHERE user_id = (?)
`

type UpdateUserRefreshTokenParams struct {
	RefreshToken string
	UserID       string
}

func (q *Queries) UpdateUserRefreshToken(ctx context.Context, arg UpdateUserRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateUserRefreshToken, arg.RefreshToken, arg.UserID)
	return err
}

const updateUserTwitchToken = `-- name: UpdateUserTwitchToken :exec
UPDATE user SET twitch_token = (?) WHERE user_id = (?)
`

type UpdateUserTwitchTokenParams struct {
	TwitchToken string
	UserID      string
}

func (q *Queries) UpdateUserTwitchToken(ctx context.Context, arg UpdateUserTwitchTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateUserTwitchToken, arg.TwitchToken, arg.UserID)
	return err
}
